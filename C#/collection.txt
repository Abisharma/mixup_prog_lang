Collection used to store the group of objects, array also do work like collection but the difference between the collection and is fixed size in array we can not add the objects whereas
in collection we can perform the insertion of the objects. 
Following are the operations that we perform on collection.

1. Store Objects
2. Update Objects
3. Delete Objects
4. Traversing Objects
5. Sorting Objects
6. Searching Objects


All collection classes are presents in System.Collection namespace, there are 3 ways to work with collection tha tare following.
1. System.Collection.Generic classes :- it contains the List Collection, stack Collection, Queue Collection, Dictionary Collection, Dictionary Sorted Collection, Hash Set Collection, Linked List
Collection, List Sorted collection and Sorted Set Collection.
 
2. System.Collection classes : there are 4 classes that are present into System.Collection, it is not recommended to use these 4 classes as they are deprecated, it is recommended to use
Generic class as in sort we can perform all kind of data structure operations.

3. System.Collection.Concurrent classes :- these classes are used to provide the safe access to multiple threads for using the objects. for example BlockingCollection, ConcurrentBag, Concurrent
Stack, ConcurrentQueue etc.


FOLLOWING SYSTEM.COLLECTION.GENERIC CLASSES AND THEIR EXAMPLE.

1. C# List :- We use the List Collection to store the objects and it can store the duplicate of the objects as well. it is placed into System.Collection.Generic classes. To traverse
the data from the List collection we can use the for each loop.

1. SIMPLE EXAMPLE FOR THE LIST COLLECTION.


using System;
using System.Collections.Generic;

class ListExample{
    //this program uses the add funtion to initialize the data into the list.

    public void display(List<string> input_list){
        foreach(string input_names in input_list)
            Console.WriteLine(" names in the list "+input_names);
    }
    
    
    public static void Main(String[] args){
        
        ListExample le =new ListExample();
        
        List<string> names = new List<string>();
        names.Add("vinod");
        names.Add("ram");
        names.Add("alex");
        names.Add("falempin");
        names.Add("alexis de claire");
        
        le.display(names);
    }
    
}


Initilization of the List by using initialization block during the declaration.

using System;
using System.Collections.Generic;

class ListExample{
    public void display(List<string> input_list){
            
            foreach(string input_names in input_list ){
                Console.WriteLine("names that are presents into list is"+ input_names);
                
            }
            
        }
    
    public static void Main(String[] args){
        
        List<string> names = new List<string>(){"raman","mahesh","ankit","ajay" };
        
        ListExample le = new ListExample();
        
        le.display(names);
        
    }
    
}

2. SIMPLE EXAMPLE FOR THE HASH SET COLLECTION

HashSet,  it is recommeded to use the HashSet when we want to store the unique object/value unlike List collection, it is present into system.Collections.Generic classes. it is used
to perform operations like store, retrieve and update etc.


ADDING THE DATA WITH ADD OPERATION  

using System;
using System.Collections.Generic;

class HashSetExample{
	
    public void display(HashSet<string> input_hashset){
    	
        foreach(string input_names in input_hashset){
        	Console.WriteLine("names that are present in hash set  "+ input_names);        
        }
        
    }
    
    public static void Main(String[] args){
    	HashSetExample hse = new HashSetExample();
        HashSet<String> names = new HashSet<string>();
        // duplicating some of the values
        names.Add("Antoine");
        names.Add("alex");
        names.Add("sandrine");
        names.Add("catherine");
        names.Add("guinëlle");
        names.Add("sandrine");
        names.Add("guinëlle");
        
        hse.display(names);
    }
    
}


ADDING THE DATA WITH INITIALIZATION AND

using System;
using System.Collections.Generic;

class HashSetExample{
    public void display(HashSet<string> input_hashset){
        foreach(string input_names in input_hashset){
            Console.WriteLine("name that is present into the hash set is " + input_names);
        }
    }
    public static void Main(String[] args){
        
        HashSetExample hse = new HashSetExample();
        HashSet<string> names = new HashSet<string>(){"Alex","antoine","sandrine","catherine","antoine","sandrine"};
        hse.display(names);
        
    }
    
}

3. Sorted Set :- it is used to store the objects without duplicacy, as the names of the collection suggest that it is storing the objects in the ascending order,
also present into System.Collections.Generic namespace. it is suggest to use it when we want to store the unique value and want to maintain the ascending order.


//Simple example of the Sorted set collection with the insertion of objects by using the add method.

using System;
using System.Collections.Generic;

class SortedSetExample{
	
	public void display(SortedSet<string> input_sorted_set ){
	    foreach(string input_sorted_name in input_sorted_set){
	        
	        Console.WriteLine("name that is presented into SortedSet  " + input_sorted_name);
	        
	    }
	}
	
    public static void Main(String[] args){
    	SortedSetExample sse  = new  SortedSetExample();
    	SortedSet<string> names =new SortedSet<string>();
    	//in the output these names will be sorted into ascending order
    names.Add("zibril");
    names.Add("Alex");
    names.Add("pauline");
    names.Add("morthy");
    names.Add("ludovic");
    
    sse.display(names);
    
     }
    
}


using System;
using System.Collections.Generic;

class SortedSetExample{
        
        public void display(SortedSet<string> input_sorted_names){
            foreach(string input_names in input_sorted_names){
                //this line will print the names in the ascending order
                Console.WriteLine("name that is present in SortedSet  "+input_names);
                
            }
        }
        
    public static void Main(String[] args){
        
        SortedSetExample sse = new SortedSetExample();
        //initializing the SortedSet by using the initialization block 
        //during the definition of the SortedSetExample.
        SortedSet<string> names = new SortedSet<string>(){"zibril","alex","yuan","barak","chloé","xavier"};
        
        sse.display(names);
    }
}



