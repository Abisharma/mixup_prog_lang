This file contains examples of control statements that we use in c-sharp programming language to control the flow of program execution.

1. Simple if example :- basically if control statement is used to control the flow of execution of the program, the execution of code depends on the conditioin that
we specified into the if block.

using System;

namespace working_with_online_editor{

public class First_If_Example{

public static void Main(String[] args){

int num = 10;

if(num%2 == 0){
Console.WriteLine("the number is even");
}

}

}

}



2. Simple If-Else example:- in this control flow statement we can specify the block of the code that is going to be execute if the condition is not set to be true.

using System;

namespace working_with_online_editor{

public class If_Else_Example{

public static void Main(String[] args){

int num = 11;

if(num%2==0){

Console.WriteLine("the number is even");

}

else{

Console.WriteLine("number is odd");

}

}

}

}


3. Simple If-Else block with input from user :- in this block we have specified to get an input from a user and apply the condition to control the flow of the code execution.

using System;

namespace working_with_online_editor{

public class If_Else_Block_With_User_Input{

public static void Main(String[] args){

Console.WriteLine("enter a number");

int num = Convert.ToInt32(Console.ReadLine());

if(num % 2 == 0)
{

Console.WriteLine("number is even");

}


else{

Console.WriteLine("number is odd");

}
}

}

}


4.if - else-if ladder :- By using the if- else-if ladder we can specify multiple condition if none of the existing condition get execute then block of code present into
the else part going to execute.



using System;

namespace working_with_online_editor{

public class If_ElseIf_Ladder{

public static void Main(String[]  args){

Console.WriteLine("enter the number to check the grade ");

int num = Convert.ToInt32(Console.ReadLine());

if(num < 0 || num > 100){

Console.WriteLine("You have entered the wrong number");

}

else if(num >= 0 && num <50){

Console.WriteLine("Fail");

}


else if(num>= 60 && num<70){

Console.WriteLine("D Grade");
}

else{

Console.WriteLine("as mentioned above we can add multiple condition to control the flow of the code execution ");

}

}

}

}




5. SWITCH Statement :- we can use switch statement to control the flow of the execution of the code as given below.

using System;

namespace working_with_online_editor{

public class Switch_Statement{

public static void Main(String[] args){

Console.WriteLine("enter a number");

int num = Convert.ToInt32(Console.ReadLine());

switch (num){

case 10: Console.WriteLine("the entered number is 10");
break;

case 20: Console.WriteLine("the entered number is 20");
break;

case 30: Console.WriteLine("the entered number is 30");
break;


default: Console.WriteLine("the entered number is not 10,20 and 30 ");
break;

}


}


}



}


6. For loop :- to make our code more fast and less lengthy we need to use the loops there are multiple kind of loops are introduced to c-sharp, basically we uses loops when we want to
execute the block of code to be executed multiple times unitl the certain condition is not going to be false in that case we do need to use the for loop, there are other options 
as well but we use concerned to fulfill the required;


using System;


public class ForloopExample{

public static void Main(String[] args){

for(int i=0; i<10; i++){

Console.WriteLine("value of i is " + i);

}

}


}


// example of nested for loop.


using System;

public class NestedForLoop{

public static void Main(String[] args)
{

for(int row=1; row <=3; row++ )
{
	for(int column = 1; column<=3; column++){
    
    	Console.WriteLine(row+" "+column);
    
    }

}


}




using System;

public class InfiniteForLoop{

public static void Main(String[] args){

// the following statement represents the infinite for loop

for(;;){

Console.WriteLine("infinite loop");

}

}



}


7. While Loop :- It is recommended to use the while loop in general, we use the while loop when we want to execute the block of certain code until a condition is not going to be false;


// A Simple while loop example.
 
using System;

public class InfiniteForLoop{

public static void Main(String[] args){

// the following statement represents the infinite for loop

for(;;){

Console.WriteLine("infinite loop");

}

}



} 


// Display the values of the rows and columns by using the nested while loops.
using System;



public class NestedWhileLoop{

public void DisplayWithNestedWhileloop(){

Console.WriteLine("pring the row and column value by using nested while loop");


int row =1;

while(row<=3){
	
    int column = 1;
	while(column<=3){
    
    Console.WriteLine(row + " " +column);
    
    column++;
    }

row++;

}

}

public static void Main(String[] args){

NestedWhileLoop nw = new NestedWhileLoop();

nw.DisplayWithNestedWhileloop();

}


}




// infinite while loop program.

using System;



public class NestedWhileLoop{

public void DisplayWithNestedWhileloop(){

Console.WriteLine("pring the row and column value by using nested while loop");


int row =1;

while(row<=3){
	
    int column = 1;
	while(column<=3){
    
    Console.WriteLine(row + " " +column);
    
    column++;
    }

row++;

}

}

public static void Main(String[] args){

NestedWhileLoop nw = new NestedWhileLoop();

nw.DisplayWithNestedWhileloop();

}


}


8. Do While loop :- when we do want to execute the block of code at least once, it doesn't matter if condition is true or not, in that case we use the do-while loop.

using System;


public class DoWhile {


public static void Main(String[] args){
int i =1;

do{

Console.WriteLine("print the value of i "+i);
i++;

}while(i<=10);

}


}

// Nested do while example

using System;

public class NestedDoWhileExample{

public void NestedDoWhile(){

int row = 1;

do{
	int col = 1;
do{
	
   	Console.WriteLine(row +" " + col);
    col++;
    }while(col <=3);

row++;
}while(row<=3);

}


public static void Main(String[] args){
								
                                
                                NestedDoWhileExample ndw = new NestedDoWhileExample();
                                
                                ndw.NestedDoWhile();

}

}


// Infinite do-while example

using System;

public class InfiniteDoW{

public static void Main(String[] args){
		
        
        do{
			
            Console.WriteLine("infinite do-while loop");
                    
        }while(true);


}

}


9. Break :- Basically break statement is used to control the flow of the code execution, if certain condition is true inside the loop then break is used to stop the execution, if we have
a nested for loop then the execution of thr inner loop is going to stop and then compiler is going to execute the next statement of the outer loop.

//Simple example of the break statement.
using System;

public class BreakExample{

void display(){
				
                for(int i =1; i<=10; i++)
                	{
                    	Console.WriteLine("value of i is "+i);
                        if(i == 5){
                        	
                            break;
                        }
                    }
                
                }


public static void Main(String[] args){
		
        BreakExample be = new BreakExample();
        be.display();
        
}


}

// break inside the nested looping statements.

using System;

public class NestedBreak{
			
            public static void Main(String[] args){
            
            for(int row=1; row<=3; row++){
            		
                    for(int col = 1; col<=3; col++){
                    		
                            if(row == 2 && col == 2)
                            {		
                            		Console.WriteLine("as condition is true we are going to break the inner loop");
                                    break;
                            }
                            
                            Console.WriteLine(row +" "+col);
                            
                    }
                                
                                
            }
            
            }
            
}


10. Continue :- Basically continue statement is used to continue the current flow of execution of the program without executing the remaining code at the specified condition.
in case nested for loops it will continue within the inner loop.

using System;

public class ContinueStatement{

	public static void Main(String[] args){
    	
        for(int i =1; i<=10; i++){
        	if(i ==5) continue;
        	Console.WriteLine("value of i "+i);
            
            }
        
    	
    }

}


//Continue with nested for loops.

using System;

public class NestedContinue{
	
    public static void Main(String[] args){
    		
            for(int i =1; i<=3; i++){
            		for(int j =1; j<=3; j++){
                    		if(i==2 && j==2){
                            Console.WriteLine("As our condition is going to be true, now continue statement is going to execute");
                            continue;
                            }
                            Console.WriteLine(i + " " +j);
                            }
            }
            
            }
    
	
}


11. GOTO Statement :- It is not recommended to use the goto statement in Program as it can make the program complex, goto is also known as jump statement, it is used to
control the flow of the program's esecution.

using System;

class GoToStatement{
	
    
    
    public static void Main(String[] args)
    {
    	ineligible:
        	Console.WriteLine("person is not eligible to vote");
            Console.WriteLine("enter the age of person");
        	int age = Convert.ToInt32( Console.ReadLine());
        
        if(age<18){
        goto ineligible;
        }
        
        else{
        	Console.WriteLine("Person is eligible to vote");
        }
     	   
     }
    
    
}

12 Comment :- we can add the comment inside the program by using // . Basically we use the comment to specify the use of the statement that is going to execute, to give the 
explanation to  the user or developer. Statement that is followed by // symbol is not going to execute by the compiler.  



